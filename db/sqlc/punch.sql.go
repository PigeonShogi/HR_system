// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: punch.sql

package db

import (
	"context"
	"time"
)

const createPunch = `-- name: CreatePunch :one
INSERT INTO punches (
  employee_id, working_day, working_hours, status_id
) VALUES (
  $1, $2, $3, $4
)
RETURNING id, employee_id, working_day, working_hours, status_id, created_at, updated_at
`

type CreatePunchParams struct {
	EmployeeID   int32     `json:"employee_id"`
	WorkingDay   time.Time `json:"working_day"`
	WorkingHours int16     `json:"working_hours"`
	StatusID     int16     `json:"status_id"`
}

func (q *Queries) CreatePunch(ctx context.Context, arg CreatePunchParams) (Punch, error) {
	row := q.db.QueryRowContext(ctx, createPunch,
		arg.EmployeeID,
		arg.WorkingDay,
		arg.WorkingHours,
		arg.StatusID,
	)
	var i Punch
	err := row.Scan(
		&i.ID,
		&i.EmployeeID,
		&i.WorkingDay,
		&i.WorkingHours,
		&i.StatusID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updatePunch = `-- name: UpdatePunch :one
UPDATE punches
  set working_hours = $2,
  status_id = $3
WHERE id = $1
RETURNING id, employee_id, working_day, working_hours, status_id, created_at, updated_at
`

type UpdatePunchParams struct {
	ID           int64 `json:"id"`
	WorkingHours int16 `json:"working_hours"`
	StatusID     int16 `json:"status_id"`
}

func (q *Queries) UpdatePunch(ctx context.Context, arg UpdatePunchParams) (Punch, error) {
	row := q.db.QueryRowContext(ctx, updatePunch, arg.ID, arg.WorkingHours, arg.StatusID)
	var i Punch
	err := row.Scan(
		&i.ID,
		&i.EmployeeID,
		&i.WorkingDay,
		&i.WorkingHours,
		&i.StatusID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
