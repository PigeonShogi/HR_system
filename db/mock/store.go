// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/PigeonShogi/HR_system/db/sqlc (interfaces: Store)

// Package mockdb is a generated GoMock package.
package mockdb

import (
	context "context"
	reflect "reflect"

	db "github.com/PigeonShogi/HR_system/db/sqlc"
	gomock "github.com/golang/mock/gomock"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// AddEmployeeStock mocks base method.
func (m *MockStore) AddEmployeeStock(arg0 context.Context, arg1 db.AddEmployeeStockParams) (db.Employee, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddEmployeeStock", arg0, arg1)
	ret0, _ := ret[0].(db.Employee)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddEmployeeStock indicates an expected call of AddEmployeeStock.
func (mr *MockStoreMockRecorder) AddEmployeeStock(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddEmployeeStock", reflect.TypeOf((*MockStore)(nil).AddEmployeeStock), arg0, arg1)
}

// CreateEmployee mocks base method.
func (m *MockStore) CreateEmployee(arg0 context.Context, arg1 db.CreateEmployeeParams) (db.Employee, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEmployee", arg0, arg1)
	ret0, _ := ret[0].(db.Employee)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEmployee indicates an expected call of CreateEmployee.
func (mr *MockStoreMockRecorder) CreateEmployee(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEmployee", reflect.TypeOf((*MockStore)(nil).CreateEmployee), arg0, arg1)
}

// CreateEntry mocks base method.
func (m *MockStore) CreateEntry(arg0 context.Context, arg1 db.CreateEntryParams) (db.Entry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEntry", arg0, arg1)
	ret0, _ := ret[0].(db.Entry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEntry indicates an expected call of CreateEntry.
func (mr *MockStoreMockRecorder) CreateEntry(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEntry", reflect.TypeOf((*MockStore)(nil).CreateEntry), arg0, arg1)
}

// CreatePunch mocks base method.
func (m *MockStore) CreatePunch(arg0 context.Context, arg1 db.CreatePunchParams) (db.Punch, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePunch", arg0, arg1)
	ret0, _ := ret[0].(db.Punch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePunch indicates an expected call of CreatePunch.
func (mr *MockStoreMockRecorder) CreatePunch(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePunch", reflect.TypeOf((*MockStore)(nil).CreatePunch), arg0, arg1)
}

// CreateTransfer mocks base method.
func (m *MockStore) CreateTransfer(arg0 context.Context, arg1 db.CreateTransferParams) (db.Transfer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTransfer", arg0, arg1)
	ret0, _ := ret[0].(db.Transfer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTransfer indicates an expected call of CreateTransfer.
func (mr *MockStoreMockRecorder) CreateTransfer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTransfer", reflect.TypeOf((*MockStore)(nil).CreateTransfer), arg0, arg1)
}

// DeleteEmployeeById mocks base method.
func (m *MockStore) DeleteEmployeeById(arg0 context.Context, arg1 int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEmployeeById", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteEmployeeById indicates an expected call of DeleteEmployeeById.
func (mr *MockStoreMockRecorder) DeleteEmployeeById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEmployeeById", reflect.TypeOf((*MockStore)(nil).DeleteEmployeeById), arg0, arg1)
}

// GetEmployee mocks base method.
func (m *MockStore) GetEmployee(arg0 context.Context, arg1 int32) (db.Employee, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEmployee", arg0, arg1)
	ret0, _ := ret[0].(db.Employee)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEmployee indicates an expected call of GetEmployee.
func (mr *MockStoreMockRecorder) GetEmployee(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEmployee", reflect.TypeOf((*MockStore)(nil).GetEmployee), arg0, arg1)
}

// GetEmployeeForUpdate mocks base method.
func (m *MockStore) GetEmployeeForUpdate(arg0 context.Context, arg1 int32) (db.Employee, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEmployeeForUpdate", arg0, arg1)
	ret0, _ := ret[0].(db.Employee)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEmployeeForUpdate indicates an expected call of GetEmployeeForUpdate.
func (mr *MockStoreMockRecorder) GetEmployeeForUpdate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEmployeeForUpdate", reflect.TypeOf((*MockStore)(nil).GetEmployeeForUpdate), arg0, arg1)
}

// GetEmployeeFromIdentities mocks base method.
func (m *MockStore) GetEmployeeFromIdentities(arg0 context.Context) (db.Identity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEmployeeFromIdentities", arg0)
	ret0, _ := ret[0].(db.Identity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEmployeeFromIdentities indicates an expected call of GetEmployeeFromIdentities.
func (mr *MockStoreMockRecorder) GetEmployeeFromIdentities(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEmployeeFromIdentities", reflect.TypeOf((*MockStore)(nil).GetEmployeeFromIdentities), arg0)
}

// GetEntry mocks base method.
func (m *MockStore) GetEntry(arg0 context.Context, arg1 int64) (db.Entry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEntry", arg0, arg1)
	ret0, _ := ret[0].(db.Entry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEntry indicates an expected call of GetEntry.
func (mr *MockStoreMockRecorder) GetEntry(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEntry", reflect.TypeOf((*MockStore)(nil).GetEntry), arg0, arg1)
}

// GetHrAdminFromIdentities mocks base method.
func (m *MockStore) GetHrAdminFromIdentities(arg0 context.Context) (db.Identity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHrAdminFromIdentities", arg0)
	ret0, _ := ret[0].(db.Identity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHrAdminFromIdentities indicates an expected call of GetHrAdminFromIdentities.
func (mr *MockStoreMockRecorder) GetHrAdminFromIdentities(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHrAdminFromIdentities", reflect.TypeOf((*MockStore)(nil).GetHrAdminFromIdentities), arg0)
}

// GetStatusByName mocks base method.
func (m *MockStore) GetStatusByName(arg0 context.Context, arg1 string) (db.Status, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStatusByName", arg0, arg1)
	ret0, _ := ret[0].(db.Status)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStatusByName indicates an expected call of GetStatusByName.
func (mr *MockStoreMockRecorder) GetStatusByName(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatusByName", reflect.TypeOf((*MockStore)(nil).GetStatusByName), arg0, arg1)
}

// GetTransfer mocks base method.
func (m *MockStore) GetTransfer(arg0 context.Context, arg1 int64) (db.Transfer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransfer", arg0, arg1)
	ret0, _ := ret[0].(db.Transfer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransfer indicates an expected call of GetTransfer.
func (mr *MockStoreMockRecorder) GetTransfer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransfer", reflect.TypeOf((*MockStore)(nil).GetTransfer), arg0, arg1)
}

// ListEmployees mocks base method.
func (m *MockStore) ListEmployees(arg0 context.Context, arg1 db.ListEmployeesParams) ([]db.Employee, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEmployees", arg0, arg1)
	ret0, _ := ret[0].([]db.Employee)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEmployees indicates an expected call of ListEmployees.
func (mr *MockStoreMockRecorder) ListEmployees(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEmployees", reflect.TypeOf((*MockStore)(nil).ListEmployees), arg0, arg1)
}

// ListEntries mocks base method.
func (m *MockStore) ListEntries(arg0 context.Context, arg1 db.ListEntriesParams) ([]db.Entry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEntries", arg0, arg1)
	ret0, _ := ret[0].([]db.Entry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEntries indicates an expected call of ListEntries.
func (mr *MockStoreMockRecorder) ListEntries(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEntries", reflect.TypeOf((*MockStore)(nil).ListEntries), arg0, arg1)
}

// ListTransfers mocks base method.
func (m *MockStore) ListTransfers(arg0 context.Context, arg1 db.ListTransfersParams) ([]db.Transfer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTransfers", arg0, arg1)
	ret0, _ := ret[0].([]db.Transfer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTransfers indicates an expected call of ListTransfers.
func (mr *MockStoreMockRecorder) ListTransfers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTransfers", reflect.TypeOf((*MockStore)(nil).ListTransfers), arg0, arg1)
}

// TransferTx mocks base method.
func (m *MockStore) TransferTx(arg0 context.Context, arg1 db.TransferTxParams) (db.TransferTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TransferTx", arg0, arg1)
	ret0, _ := ret[0].(db.TransferTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TransferTx indicates an expected call of TransferTx.
func (mr *MockStoreMockRecorder) TransferTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransferTx", reflect.TypeOf((*MockStore)(nil).TransferTx), arg0, arg1)
}

// UpdateEmployeeWithStock mocks base method.
func (m *MockStore) UpdateEmployeeWithStock(arg0 context.Context, arg1 db.UpdateEmployeeWithStockParams) (db.Employee, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEmployeeWithStock", arg0, arg1)
	ret0, _ := ret[0].(db.Employee)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateEmployeeWithStock indicates an expected call of UpdateEmployeeWithStock.
func (mr *MockStoreMockRecorder) UpdateEmployeeWithStock(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEmployeeWithStock", reflect.TypeOf((*MockStore)(nil).UpdateEmployeeWithStock), arg0, arg1)
}

// UpdatePunch mocks base method.
func (m *MockStore) UpdatePunch(arg0 context.Context, arg1 db.UpdatePunchParams) (db.Punch, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePunch", arg0, arg1)
	ret0, _ := ret[0].(db.Punch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePunch indicates an expected call of UpdatePunch.
func (mr *MockStoreMockRecorder) UpdatePunch(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePunch", reflect.TypeOf((*MockStore)(nil).UpdatePunch), arg0, arg1)
}
